//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input assets/RegisterInputClass.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RegisterInputClass : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RegisterInputClass()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RegisterInputClass"",
    ""maps"": [
        {
            ""name"": ""PlayerRegister"",
            ""id"": ""7a13b515-0cd5-4561-a598-605aee4ad022"",
            ""actions"": [
                {
                    ""name"": ""AddPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""66b0b02d-7296-4263-ae24-df499e9d6d30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""271ce65d-528d-4e70-b2dc-170d5a9e90cf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57d853a4-6780-476b-864b-5e4c8fb966fb"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27e0a867-7f5e-4928-afcf-e006a50818b3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""957198bb-9e3d-4acb-8a8f-2fe6e192b3c4"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3396b96c-4650-497c-9b44-d40a40a8830f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52f01588-4a29-4467-908b-cee79c4f582e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerRegister
        m_PlayerRegister = asset.FindActionMap("PlayerRegister", throwIfNotFound: true);
        m_PlayerRegister_AddPlayer = m_PlayerRegister.FindAction("AddPlayer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerRegister
    private readonly InputActionMap m_PlayerRegister;
    private IPlayerRegisterActions m_PlayerRegisterActionsCallbackInterface;
    private readonly InputAction m_PlayerRegister_AddPlayer;
    public struct PlayerRegisterActions
    {
        private @RegisterInputClass m_Wrapper;
        public PlayerRegisterActions(@RegisterInputClass wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddPlayer => m_Wrapper.m_PlayerRegister_AddPlayer;
        public InputActionMap Get() { return m_Wrapper.m_PlayerRegister; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerRegisterActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerRegisterActions instance)
        {
            if (m_Wrapper.m_PlayerRegisterActionsCallbackInterface != null)
            {
                @AddPlayer.started -= m_Wrapper.m_PlayerRegisterActionsCallbackInterface.OnAddPlayer;
                @AddPlayer.performed -= m_Wrapper.m_PlayerRegisterActionsCallbackInterface.OnAddPlayer;
                @AddPlayer.canceled -= m_Wrapper.m_PlayerRegisterActionsCallbackInterface.OnAddPlayer;
            }
            m_Wrapper.m_PlayerRegisterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AddPlayer.started += instance.OnAddPlayer;
                @AddPlayer.performed += instance.OnAddPlayer;
                @AddPlayer.canceled += instance.OnAddPlayer;
            }
        }
    }
    public PlayerRegisterActions @PlayerRegister => new PlayerRegisterActions(this);
    public interface IPlayerRegisterActions
    {
        void OnAddPlayer(InputAction.CallbackContext context);
    }
}
