//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input assets/PlayerInputClass.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputClass : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputClass()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputClass"",
    ""maps"": [
        {
            ""name"": ""ControlsKeyboard1"",
            ""id"": ""df528e00-1ec4-4f68-b8da-3022be023b1d"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""cf92cf69-4a5d-46cb-b704-336d00b1b3e5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a0f8329a-acd7-45a3-808f-05c6cd718e05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""6dff6829-15e8-46f2-aef4-fe04aefc9520"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5828c73a-9d81-4451-8c6a-f3ac675b5f2c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bc9ea96-b471-4d21-b6f1-e32a057a9032"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""dcecb86d-3283-46bb-ada1-0b5d48cf3b20"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cac971fb-33f7-4248-95f4-7da63a5be7f6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d68e411b-1da9-4dd5-920f-0ee55aef668d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ControlsKeyboard4"",
            ""id"": ""3e52d352-eb3a-4425-95d8-d73160059d1d"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""11d63814-b1ac-44bc-9e23-61cf716db4dc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f43728ec-1743-4bd6-a326-7b8b118901b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""05c698a1-7ba1-45db-9dad-4493fcb45eee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f7819ec-850e-4e9b-9111-1ac20321fd37"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d08a987-3f72-4136-bfd0-69cd9b6e4bba"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""HK"",
                    ""id"": ""ea637e2b-b8c7-4fdc-8a89-3f9a84404ea3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d3cdaee5-265e-4b52-b6b5-5853990597a3"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3782414d-8fef-4f91-acc3-bc03ef170053"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ControlsKeyboard2"",
            ""id"": ""0bda0beb-262a-4ad2-874d-86faa265cd71"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""3e32fc60-5f79-4270-acaa-e0357a39c32f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b0e69dbc-742d-4d91-b152-9276249101b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""bcf834b4-070b-4f02-9ae7-691a3361949b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""83a4dcd4-e58f-40d2-8fd7-2579038c54fb"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba95d10d-d7b8-4473-a147-793f8d068131"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left and Right"",
                    ""id"": ""8c63f1f1-07a0-4983-90be-23bbf4ab8942"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""610dc90e-83ce-4237-aac8-b73b15cf3d65"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bd9ff08e-8ae5-41b2-b142-c0f1653871c8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ControlsKeyboard3"",
            ""id"": ""ebd87382-6bc4-47f0-bcdc-9396da622f63"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""baf5baf7-c148-4dc4-bbf0-ee0dd209f670"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""fd73451e-b99a-40b5-96cd-6da6b4be3efa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""4d08a696-42c2-4d1e-80e8-08eb471aafba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb93fa97-ee60-40b7-a474-4919b201f0e9"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bee41d27-8538-479b-a8fb-ae3087c622a9"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""46"",
                    ""id"": ""629fcf81-b604-40cc-b107-8f854df5364a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5c011502-0ebd-4a20-a45b-3f8967afcdad"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""38743531-a84b-4286-8f96-c6c33f528d17"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ControlsOther"",
            ""id"": ""11ee7ce1-04f6-4a54-981f-79a52ee7b3e6"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""dd8d7919-aa02-481b-9491-0a2bde08af35"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0b28d685-35f7-46fe-9e28-9dc22f62978b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""0205da3a-9664-4766-9956-eac6b8ad3990"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed360f13-d89c-43a0-8cff-cce8072ae9cf"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75c27aa2-43d4-446c-a026-259574a16933"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b824e6f3-546b-4803-b28e-c7f9e57da1ff"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ead384fa-4460-47eb-9d30-9bd17513a8eb"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""586ef376-4790-4841-8b69-e017c7773f7a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25bd7a43-85c6-4b75-b99d-edab62be70ec"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""55642eba-abe5-459e-baac-1e77ded52507"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""41675de7-0c3c-4e6e-bede-a41d25ee6c4e"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c3e39378-69c6-497e-8bf1-8d313e93f36c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1568e199-dd49-4c3a-b2b8-0cffb880b7d4"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControlsKeyboard1
        m_ControlsKeyboard1 = asset.FindActionMap("ControlsKeyboard1", throwIfNotFound: true);
        m_ControlsKeyboard1_Horizontal = m_ControlsKeyboard1.FindAction("Horizontal", throwIfNotFound: true);
        m_ControlsKeyboard1_Jump = m_ControlsKeyboard1.FindAction("Jump", throwIfNotFound: true);
        m_ControlsKeyboard1_Pickup = m_ControlsKeyboard1.FindAction("Pickup", throwIfNotFound: true);
        // ControlsKeyboard4
        m_ControlsKeyboard4 = asset.FindActionMap("ControlsKeyboard4", throwIfNotFound: true);
        m_ControlsKeyboard4_Horizontal = m_ControlsKeyboard4.FindAction("Horizontal", throwIfNotFound: true);
        m_ControlsKeyboard4_Jump = m_ControlsKeyboard4.FindAction("Jump", throwIfNotFound: true);
        m_ControlsKeyboard4_Pickup = m_ControlsKeyboard4.FindAction("Pickup", throwIfNotFound: true);
        // ControlsKeyboard2
        m_ControlsKeyboard2 = asset.FindActionMap("ControlsKeyboard2", throwIfNotFound: true);
        m_ControlsKeyboard2_Horizontal = m_ControlsKeyboard2.FindAction("Horizontal", throwIfNotFound: true);
        m_ControlsKeyboard2_Jump = m_ControlsKeyboard2.FindAction("Jump", throwIfNotFound: true);
        m_ControlsKeyboard2_Pickup = m_ControlsKeyboard2.FindAction("Pickup", throwIfNotFound: true);
        // ControlsKeyboard3
        m_ControlsKeyboard3 = asset.FindActionMap("ControlsKeyboard3", throwIfNotFound: true);
        m_ControlsKeyboard3_Horizontal = m_ControlsKeyboard3.FindAction("Horizontal", throwIfNotFound: true);
        m_ControlsKeyboard3_Jump = m_ControlsKeyboard3.FindAction("Jump", throwIfNotFound: true);
        m_ControlsKeyboard3_Pickup = m_ControlsKeyboard3.FindAction("Pickup", throwIfNotFound: true);
        // ControlsOther
        m_ControlsOther = asset.FindActionMap("ControlsOther", throwIfNotFound: true);
        m_ControlsOther_Horizontal = m_ControlsOther.FindAction("Horizontal", throwIfNotFound: true);
        m_ControlsOther_Jump = m_ControlsOther.FindAction("Jump", throwIfNotFound: true);
        m_ControlsOther_Pickup = m_ControlsOther.FindAction("Pickup", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControlsKeyboard1
    private readonly InputActionMap m_ControlsKeyboard1;
    private IControlsKeyboard1Actions m_ControlsKeyboard1ActionsCallbackInterface;
    private readonly InputAction m_ControlsKeyboard1_Horizontal;
    private readonly InputAction m_ControlsKeyboard1_Jump;
    private readonly InputAction m_ControlsKeyboard1_Pickup;
    public struct ControlsKeyboard1Actions
    {
        private @PlayerInputClass m_Wrapper;
        public ControlsKeyboard1Actions(@PlayerInputClass wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_ControlsKeyboard1_Horizontal;
        public InputAction @Jump => m_Wrapper.m_ControlsKeyboard1_Jump;
        public InputAction @Pickup => m_Wrapper.m_ControlsKeyboard1_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_ControlsKeyboard1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsKeyboard1Actions set) { return set.Get(); }
        public void SetCallbacks(IControlsKeyboard1Actions instance)
        {
            if (m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnHorizontal;
                @Jump.started -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnJump;
                @Pickup.started -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_ControlsKeyboard1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public ControlsKeyboard1Actions @ControlsKeyboard1 => new ControlsKeyboard1Actions(this);

    // ControlsKeyboard4
    private readonly InputActionMap m_ControlsKeyboard4;
    private IControlsKeyboard4Actions m_ControlsKeyboard4ActionsCallbackInterface;
    private readonly InputAction m_ControlsKeyboard4_Horizontal;
    private readonly InputAction m_ControlsKeyboard4_Jump;
    private readonly InputAction m_ControlsKeyboard4_Pickup;
    public struct ControlsKeyboard4Actions
    {
        private @PlayerInputClass m_Wrapper;
        public ControlsKeyboard4Actions(@PlayerInputClass wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_ControlsKeyboard4_Horizontal;
        public InputAction @Jump => m_Wrapper.m_ControlsKeyboard4_Jump;
        public InputAction @Pickup => m_Wrapper.m_ControlsKeyboard4_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_ControlsKeyboard4; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsKeyboard4Actions set) { return set.Get(); }
        public void SetCallbacks(IControlsKeyboard4Actions instance)
        {
            if (m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnHorizontal;
                @Jump.started -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnJump;
                @Pickup.started -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_ControlsKeyboard4ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public ControlsKeyboard4Actions @ControlsKeyboard4 => new ControlsKeyboard4Actions(this);

    // ControlsKeyboard2
    private readonly InputActionMap m_ControlsKeyboard2;
    private IControlsKeyboard2Actions m_ControlsKeyboard2ActionsCallbackInterface;
    private readonly InputAction m_ControlsKeyboard2_Horizontal;
    private readonly InputAction m_ControlsKeyboard2_Jump;
    private readonly InputAction m_ControlsKeyboard2_Pickup;
    public struct ControlsKeyboard2Actions
    {
        private @PlayerInputClass m_Wrapper;
        public ControlsKeyboard2Actions(@PlayerInputClass wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_ControlsKeyboard2_Horizontal;
        public InputAction @Jump => m_Wrapper.m_ControlsKeyboard2_Jump;
        public InputAction @Pickup => m_Wrapper.m_ControlsKeyboard2_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_ControlsKeyboard2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsKeyboard2Actions set) { return set.Get(); }
        public void SetCallbacks(IControlsKeyboard2Actions instance)
        {
            if (m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnHorizontal;
                @Jump.started -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnJump;
                @Pickup.started -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_ControlsKeyboard2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public ControlsKeyboard2Actions @ControlsKeyboard2 => new ControlsKeyboard2Actions(this);

    // ControlsKeyboard3
    private readonly InputActionMap m_ControlsKeyboard3;
    private IControlsKeyboard3Actions m_ControlsKeyboard3ActionsCallbackInterface;
    private readonly InputAction m_ControlsKeyboard3_Horizontal;
    private readonly InputAction m_ControlsKeyboard3_Jump;
    private readonly InputAction m_ControlsKeyboard3_Pickup;
    public struct ControlsKeyboard3Actions
    {
        private @PlayerInputClass m_Wrapper;
        public ControlsKeyboard3Actions(@PlayerInputClass wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_ControlsKeyboard3_Horizontal;
        public InputAction @Jump => m_Wrapper.m_ControlsKeyboard3_Jump;
        public InputAction @Pickup => m_Wrapper.m_ControlsKeyboard3_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_ControlsKeyboard3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsKeyboard3Actions set) { return set.Get(); }
        public void SetCallbacks(IControlsKeyboard3Actions instance)
        {
            if (m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnHorizontal;
                @Jump.started -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnJump;
                @Pickup.started -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_ControlsKeyboard3ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public ControlsKeyboard3Actions @ControlsKeyboard3 => new ControlsKeyboard3Actions(this);

    // ControlsOther
    private readonly InputActionMap m_ControlsOther;
    private IControlsOtherActions m_ControlsOtherActionsCallbackInterface;
    private readonly InputAction m_ControlsOther_Horizontal;
    private readonly InputAction m_ControlsOther_Jump;
    private readonly InputAction m_ControlsOther_Pickup;
    public struct ControlsOtherActions
    {
        private @PlayerInputClass m_Wrapper;
        public ControlsOtherActions(@PlayerInputClass wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_ControlsOther_Horizontal;
        public InputAction @Jump => m_Wrapper.m_ControlsOther_Jump;
        public InputAction @Pickup => m_Wrapper.m_ControlsOther_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_ControlsOther; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsOtherActions set) { return set.Get(); }
        public void SetCallbacks(IControlsOtherActions instance)
        {
            if (m_Wrapper.m_ControlsOtherActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnHorizontal;
                @Jump.started -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnJump;
                @Pickup.started -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_ControlsOtherActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_ControlsOtherActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public ControlsOtherActions @ControlsOther => new ControlsOtherActions(this);
    public interface IControlsKeyboard1Actions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
    public interface IControlsKeyboard4Actions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
    public interface IControlsKeyboard2Actions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
    public interface IControlsKeyboard3Actions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
    public interface IControlsOtherActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
}
